name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  IMAGE_NAME: devops-cicd-demo
  REGISTRY: ghcr.io

jobs:
  # Code Quality and Security Analysis
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install flake8 black isort bandit safety pytest pytest-cov mypy

      - name: Code formatting check (Black)
        run: black --check --diff src/

      - name: Import sorting check (isort)
        run: isort --check-only --diff src/

      - name: Lint with flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type checking with mypy
        run: mypy src/ --ignore-missing-imports || true

      - name: Security scan with bandit
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Dependency vulnerability scan
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install pytest pytest-cov pytest-html requests

      - name: Create test files
        run: |
          mkdir -p tests
          cat > tests/test_app.py << 'EOF'
          import pytest
          import sys
          import os
          sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))
          
          from app import create_app
          
          @pytest.fixture
          def client():
              app = create_app()
              app.config['TESTING'] = True
              with app.test_client() as client:
                  yield client
          
          def test_health_check(client):
              """Test health check endpoint"""
              response = client.get('/healthz')
              assert response.status_code == 200
              assert b'healthy' in response.data.lower() or response.status_code == 200
          
          def test_metrics_endpoint(client):
              """Test metrics endpoint"""
              response = client.get('/metrics')
              assert response.status_code in [200, 401]  # May require auth
          
          def test_root_endpoint(client):
              """Test root endpoint"""
              response = client.get('/')
              assert response.status_code in [200, 404]  # Depends on implementation
          EOF

      - name: Run tests with coverage
        run: |
          cd src
          python -m pytest ../tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            src/coverage.xml
            src/htmlcov/

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Load Docker image
        run: docker load --input /tmp/image.tar

      - name: Test Docker image
        run: |
          # Start container in background
          docker run -d --name test-container -p 8080:8080 ${{ env.IMAGE_NAME }}:test
          
          # Wait for container to start
          sleep 10
          
          # Test health check
          timeout 30 bash -c 'until curl -f http://localhost:8080/healthz; do sleep 2; done'
          
          # Check container logs
          docker logs test-container
          
          # Stop container
          docker stop test-container
          docker rm test-container

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check image size
        run: |
          IMAGE_SIZE=$(docker images ${{ env.IMAGE_NAME }}:test --format "table {{.Size}}" | tail -n 1)
          echo "Image size: $IMAGE_SIZE"
          
          # Convert to MB for comparison (rough estimation)
          SIZE_MB=$(docker images ${{ env.IMAGE_NAME }}:test --format "{{.Size}}" | tail -n 1 | sed 's/MB//' | sed 's/GB/*1000/' | bc 2>/dev/null || echo "unknown")
          echo "IMAGE_SIZE_MB=$SIZE_MB" >> $GITHUB_ENV

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

  # Docker Compose Test
  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cp env.example .env
          echo "METRICS_USER=testuser" >> .env
          echo "METRICS_PASS=testpass123" >> .env

      - name: Run Docker Compose
        run: |
          docker-compose up -d
          sleep 15

      - name: Test application via Docker Compose
        run: |
          # Test health check
          curl -f http://localhost:8080/healthz
          
          # Test metrics endpoint (may require auth)
          curl -s http://localhost:8080/metrics || echo "Metrics endpoint requires authentication (expected)"

      - name: Check container logs
        if: always()
        run: |
          docker-compose logs web

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  # Build Summary and Notifications
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker-build, docker-compose-test]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate build summary
        run: |
          echo "# 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Build**: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Compose Test**: ${{ needs.docker-compose-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Security reports (Bandit, Safety, Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- Test coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "- Docker image (temporary)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Python versions tested: 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- Docker image size: Optimized with multi-stage build" >> $GITHUB_STEP_SUMMARY
          echo "- Security scans: Completed" >> $GITHUB_STEP_SUMMARY
